function __c(r){return new r.__proto__.constructor}function __set_arr(r,_,t,a){const s=_?Array.from(_):[];if(0===s.length){if(r.__arr instanceof Float32Array)return r;for(let r=0;r<t;r++)s.push(0)}const i=[];return s.forEach(r=>{if(null==r)return;const _=r instanceof Array;if(_||r.__arr){(_?r:r.__arr).forEach(r=>i.push(r))}else i.push(r)}),i.length!=t?engine.error(`Invalid parameters specified to ${a}.set(). Parameters can be arrays, vec**s, mat**s, or quat*s, as long as the number of values stored within them is equal to ${t}. ${i.length} value${1===i.length?"":"s"} were found.`):r.__arr.set(i),r}function __new_arr(r,_){return new r.__arr.__proto__.constructor(_)}require("./jsdeps/gl-matrix");var DEG_TO_RAD=.01745329251,RAD_TO_DEG=57.2957795131;function UseRadians(){DEG_TO_RAD=1,RAD_TO_DEG=1}function UseDegrees(){DEG_TO_RAD=.01745329251,RAD_TO_DEG=57.2957795131}class vec4{constructor(r,_){this.__xyz=null,this.__yzw=null,this.__xy=null,this.__yz=null,this.__zw=null,_.__view?this.__arr=new r.__proto__.constructor(r.buffer,r.byteOffset+4*_.__view[0],_.__view[1]):(this.__arr=r,__set_arr(this,_,4,"vec4*"))}clone(){const r=__c(this);return r.__arr.set(this.__arr),r}set(){return __set_arr(this,arguments,4,"vec4*")}add(r){const _=__c(this);return _glMatrix._vec4.add(_.__arr,this.__arr,r.__arr),_}addEq(r){return _glMatrix._vec4.add(this.__arr,this.__arr,r.__arr),this}sub(r){const _=__c(this);return _glMatrix._vec4.subtract(_.__arr,this.__arr,r.__arr),_}subEq(r){return _glMatrix._vec4.subtract(this.__arr,this.__arr,r.__arr),this}mul(r){const _=__c(this);return _glMatrix._vec4.multiply(_.__arr,this.__arr,r.__arr),_}mulEq(r){return _glMatrix._vec4.multiply(this.__arr,this.__arr,r.__arr),this}div(r){const _=__c(this);return _glMatrix._vec4.divide(_.__arr,this.__arr,r.__arr),_}divEq(r){return _glMatrix._vec4.divide(this.__arr,this.__arr,r.__arr),this}transformed(r){const _=__c(this);return r instanceof mat4?_glMatrix._vec4.transformMat4(_.__arr,this.__arr,r.__arr):r instanceof quat&&_glMatrix._vec4.transformQuat(_.__arr,this.__arr,r.__arr),_}transform(r){return r instanceof mat4?_glMatrix._vec4.transformMat4(this.__arr,this.__arr,r.__arr):r instanceof quat&&_glMatrix._vec4.transformQuat(this.__arr,this.__arr,r.__arr),this}ceil(){const r=__c(this);return _glMatrix._vec4.ceil(r.__arr,this.__arr),r}ceilEq(){return _glMatrix._vec4.ceil(this.__arr,this.__arr),this}floor(){const r=__c(this);return _glMatrix._vec4.floor(r.__arr,this.__arr),r}floorEq(){return _glMatrix._vec4.floor(this.__arr,this.__arr),this}zero(){return _glMatrix._vec4.zero(this.__arr),this}distance(r){return _glMatrix._vec4.distance(this.__arr,r.__arr)}squaredDistance(r){return _glMatrix._vec4.squaredDistance(this.__arr,r.__arr)}dot(r){return _glMatrix._vec4.dot(this.__arr,r.__arr)}equals(r){return _glMatrix._vec4.equals(this.__arr,r.__arr)}exactEquals(r){return _glMatrix._vec4.exactEquals(this.__arr,r.__arr)}inverse(){const r=__c(this);return _glMatrix._vec4.inverse(r.__arr,this.__arr),r}invert(){return _glMatrix._vec4.inverse(this.__arr,this.__arr),this}negated(){const r=__c(this);return _glMatrix._vec4.negate(r.__arr,this.__arr),r}negate(){return _glMatrix._vec4.negate(this.__arr,this.__arr),this}normalized(){const r=__c(this);return _glMatrix._vec4.normalize(r.__arr,this.__arr),r}normalize(){return _glMatrix._vec4.normalize(this.__arr,this.__arr),this}rounded(){const r=__c(this);return _glMatrix._vec4.round(r.__arr,this.__arr),r}round(){return _glMatrix._vec4.round(this.__arr,this.__arr),this}scaled(r){const _=__c(this);return _glMatrix._vec4.scale(_.__arr,this.__arr,r),_}scale(r){return _glMatrix._vec4.scale(this.__arr,this.__arr,r),this}toString(){return`${this.__arr[0]}, ${this.__arr[1]}, ${this.__arr[2]}, ${this.__arr[3]}`}static cross(r,_,t){const a=__c(r);return _glMatrix._vec4.cross(a.__arr,r.__arr,_.__arr,t.__arr),a}static lerp(r,_,t){const a=__c(r);return _glMatrix._vec4.lerp(a.__arr,r.__arr,_.__arr,t),a}static min(r,_){const t=__c(r);return _glMatrix._vec4.min(t.__arr,r.__arr,_.__arr),t}static max(r,_){const t=__c(r);return _glMatrix._vec4.max(t.__arr,r.__arr,_.__arr),t}get squaredLength(){return _glMatrix._vec4.squaredLength(this.__arr)}get length(){return _glMatrix._vec4.length(this.__arr)}set length(r){this.normalize(),this.scale(r)}get x(){return this.__arr[0]}set x(r){return this.__arr[0]=r}get y(){return this.__arr[1]}set y(r){return this.__arr[1]=r}get z(){return this.__arr[2]}set z(r){return this.__arr[2]=r}get w(){return this.__arr[3]}set w(r){return this.__arr[3]=r}get xyz(){return this.__xyz||(this.__xyz=new vec3(this.__arr,{__view:[0,3]})),this.__xyz}set xyz(r){this.__arr[0]=r.__arr[0],this.__arr[1]=r.__arr[1],this.__arr[2]=r.__arr[2]}get yzw(){return this.__yzw||(this.__yzw=new vec3(this.__arr,{__view:[1,3]})),this.__yzw}set yzw(r){this.__arr[1]=r.__arr[0],this.__arr[2]=r.__arr[1],this.__arr[3]=r.__arr[2]}get xy(){return this.__xy||(this.__xy=new vec2(this.__arr,{__view:[0,2]})),this.__xy}set xy(r){this.__arr[0]=r.__arr[0],this.__arr[1]=r.__arr[1]}get yz(){return this.__yz||(this.__yz=new vec2(this.__arr,{__view:[1,2]})),this.__yz}set yz(r){this.__arr[1]=r.__arr[0],this.__arr[2]=r.__arr[1]}get zw(){return this.__zw||(this.__zw=new vec2(this.__arr,{__view:[2,2]})),this.__zw}set zw(r){this.__arr[2]=r.__arr[0],this.__arr[3]=r.__arr[1]}}class vec3{constructor(r,_){this.__xy=null,this.__yz=null,_.__view?this.__arr=new r.__proto__.constructor(r.buffer,r.byteOffset+4*_.__view[0],_.__view[1]):(this.__arr=r,__set_arr(this,_,3,"vec3*"))}clone(){const r=__c(this);return r.__arr.set(this.__arr),r}set(){return __set_arr(this,arguments,3,"vec3*")}add(r){const _=__c(this);return _glMatrix._vec3.add(_.__arr,this.__arr,r.__arr),_}addEq(r){return _glMatrix._vec3.add(this.__arr,this.__arr,r.__arr),this}sub(r){const _=__c(this);return _glMatrix._vec3.subtract(_.__arr,this.__arr,r.__arr),_}subEq(r){return _glMatrix._vec3.subtract(this.__arr,this.__arr,r.__arr),this}mul(r){const _=__c(this);return _glMatrix._vec3.multiply(_.__arr,this.__arr,r.__arr),_}mulEq(r){return _glMatrix._vec3.multiply(this.__arr,this.__arr,r.__arr),this}div(r){const _=__c(this);return _glMatrix._vec3.divide(_.__arr,this.__arr,r.__arr),_}divEq(r){return _glMatrix._vec3.divide(this.__arr,this.__arr,r.__arr),this}transformed(r){const _=__c(this);return r instanceof mat4?_glMatrix._vec3.transformMat4(_.__arr,this.__arr,r.__arr):r instanceof quat?_glMatrix._vec3.transformQuat(_.__arr,this.__arr,r.__arr):r instanceof mat3&&_glMatrix._vec3.transformMat3(_.__arr,this.__arr,r.__arr),_}transform(r){return r instanceof mat4?_glMatrix._vec3.transformMat4(this.__arr,this.__arr,r.__arr):r instanceof quat?_glMatrix._vec3.transformQuat(this.__arr,this.__arr,r.__arr):r instanceof mat3&&_glMatrix._vec3.transformMat3(this.__arr,this.__arr,r.__arr),this}ceil(){const r=__c(this);return _glMatrix._vec3.ceil(r.__arr,this.__arr),r}ceilEq(){return _glMatrix._vec3.ceil(this.__arr,this.__arr),this}floor(){const r=__c(this);return _glMatrix._vec3.floor(r.__arr,this.__arr),r}floorEq(){return _glMatrix._vec3.floor(this.__arr,this.__arr),this}zero(){return _glMatrix._vec3.zero(this.__arr),this}distance(r){return _glMatrix._vec3.distance(this.__arr,r.__arr)}squaredDistance(r){return _glMatrix._vec3.squaredDistance(this.__arr,r.__arr)}dot(r){return _glMatrix._vec3.dot(this.__arr,r.__arr)}equals(r){return _glMatrix._vec3.equals(this.__arr,r.__arr)}exactEquals(r){return _glMatrix._vec3.exactEquals(this.__arr,r.__arr)}inverse(){const r=__c(this);return _glMatrix._vec3.inverse(r.__arr,this.__arr),r}invert(){return _glMatrix._vec3.inverse(this.__arr,this.__arr),this}negated(){const r=__c(this);return _glMatrix._vec3.negate(r.__arr,this.__arr),r}negate(){return _glMatrix._vec3.negate(this.__arr,this.__arr),this}normalized(){const r=__c(this);return _glMatrix._vec3.normalize(r.__arr,this.__arr),r}normalize(){return _glMatrix._vec3.normalize(this.__arr,this.__arr),this}rounded(){const r=__c(this);return _glMatrix._vec3.round(r.__arr,this.__arr),r}round(){return _glMatrix._vec3.round(this.__arr,this.__arr),this}scaled(r){const _=__c(this);return _glMatrix._vec3.scale(_.__arr,this.__arr,r),_}scale(r){return _glMatrix._vec3.scale(this.__arr,this.__arr,r),this}toString(){return`${this.__arr[0]}, ${this.__arr[1]}, ${this.__arr[2]}`}static cross(r,_){const t=__c(r);return _glMatrix._vec3.cross(t.__arr,r.__arr,_.__arr),t}static angle(r,_){_glMatrix._vec3.angle(out.__arr,r.__arr,_.__arr)}static lerp(r,_,t){const a=__c(r);return _glMatrix._vec3.lerp(a.__arr,r.__arr,_.__arr,t),a}static min(r,_){const t=__c(r);return _glMatrix._vec3.min(t.__arr,r.__arr,_.__arr),t}static max(r,_){const t=__c(r);return _glMatrix._vec3.max(t.__arr,r.__arr,_.__arr),t}static rotateX(r,_,t){const a=__c(r);return _glMatrix._vec3.rotateX(a.__arr,r.__arr,_.__arr,t*DEG_TO_RAD),a}static rotateY(r,_,t){const a=__c(r);return _glMatrix._vec3.rotateY(a.__arr,r.__arr,_.__arr,t*DEG_TO_RAD),a}static rotateZ(r,_,t){const a=__c(r);return _glMatrix._vec3.rotateZ(a.__arr,r.__arr,_.__arr,t*DEG_TO_RAD),a}get squaredLength(){return _glMatrix._vec3.squaredLength(this.__arr)}get length(){return _glMatrix._vec3.length(this.__arr)}set length(r){this.normalize(),this.scale(r)}get x(){return this.__arr[0]}set x(r){return this.__arr[0]=r}get y(){return this.__arr[1]}set y(r){return this.__arr[1]=r}get z(){return this.__arr[2]}set z(r){return this.__arr[2]=r}get xy(){return this.__xy||(this.__xy=new vec2(this.__arr,{__view:[0,2]})),this.__xy}set xy(r){this.__arr[0]=r.__arr[0],this.__arr[1]=r.__arr[1]}get yz(){return this.__yz||(this.__yz=new vec2(this.__arr,{__view:[1,2]})),this.__yz}set yz(r){this.__arr[1]=r.__arr[0],this.__arr[2]=r.__arr[1]}}class vec2{constructor(r,_){_.__view?this.__arr=new r.__proto__.constructor(r.buffer,r.byteOffset+4*_.__view[0],_.__view[1]):(this.__arr=r,__set_arr(this,_,2,"vec2*"))}clone(){const r=__c(this);return r.__arr.set(this.__arr),r}set(r,_){return __set_arr(this,[r,_],2,"vec2*")}add(r){const _=__c(this);return _glMatrix._vec2.add(_.__arr,this.__arr,r.__arr),_}addEq(r){return _glMatrix._vec2.add(this.__arr,this.__arr,r.__arr),this}sub(r){const _=__c(this);return _glMatrix._vec2.subtract(_.__arr,this.__arr,r.__arr),_}subEq(r){return _glMatrix._vec2.subtract(this.__arr,this.__arr,r.__arr),this}mul(r){const _=__c(this);return _glMatrix._vec2.multiply(_.__arr,this.__arr,r.__arr),_}mulEq(r){return _glMatrix._vec2.multiply(this.__arr,this.__arr,r.__arr),this}div(r){const _=__c(this);return _glMatrix._vec2.divide(_.__arr,this.__arr,r.__arr),_}divEq(r){return _glMatrix._vec2.divide(this.__arr,this.__arr,r.__arr),this}transformed(r){const _=__c(this);return r instanceof mat4?_glMatrix._vec2.transformMat4(_.__arr,this.__arr,r.__arr):r instanceof mat3?_glMatrix._vec2.transformMat3(_.__arr,this.__arr,r.__arr):r instanceof mat2&&_glMatrix._vec2.transformMat2(_.__arr,this.__arr,r.__arr),_}transform(r){return r instanceof mat4?_glMatrix._vec2.transformMat4(this.__arr,this.__arr,r.__arr):r instanceof mat3?_glMatrix._vec2.transformMat3(this.__arr,this.__arr,r.__arr):r instanceof mat2&&_glMatrix._vec2.transformMat2(this.__arr,this.__arr,r.__arr),this}ceil(){const r=__c(this);return _glMatrix._vec2.ceil(r.__arr,this.__arr),r}ceilEq(){return _glMatrix._vec2.ceil(this.__arr,this.__arr),this}floor(){const r=__c(this);return _glMatrix._vec2.floor(r.__arr,this.__arr),r}floorEq(){return _glMatrix._vec2.floor(this.__arr,this.__arr),this}zero(){return _glMatrix._vec2.zero(this.__arr),this}distance(r){return _glMatrix._vec2.distance(this.__arr,r.__arr)}squaredDistance(r){return _glMatrix._vec2.squaredDistance(this.__arr,r.__arr)}dot(r){return _glMatrix._vec2.dot(this.__arr,r.__arr)}equals(r){return _glMatrix._vec2.equals(this.__arr,r.__arr)}exactEquals(r){return _glMatrix._vec2.exactEquals(this.__arr,r.__arr)}inverse(){const r=__c(this);return _glMatrix._vec2.inverse(r.__arr,this.__arr),r}invert(){return _glMatrix._vec2.inverse(this.__arr,this.__arr),this}negated(){const r=__c(this);return _glMatrix._vec2.negate(r.__arr,this.__arr),r}negate(){return _glMatrix._vec2.negate(this.__arr,this.__arr),this}normalized(){const r=__c(this);return _glMatrix._vec2.normalize(r.__arr,this.__arr),r}normalize(){return _glMatrix._vec2.normalize(this.__arr,this.__arr),this}rounded(){const r=__c(this);return _glMatrix._vec2.round(r.__arr,this.__arr),r}round(){return _glMatrix._vec2.round(this.__arr,this.__arr),this}scaled(r){const _=__c(this);return _glMatrix._vec2.scale(_.__arr,this.__arr,r),_}scale(r){return _glMatrix._vec2.scale(this.__arr,this.__arr,r),this}toString(){return`${this.__arr[0]}, ${this.__arr[1]}`}static cross(r,_){const t=__c(r);return _glMatrix._vec2.cross(t.__arr,r.__arr,_.__arr),t}static angle(r,_){_glMatrix._vec2.angle(out.__arr,r.__arr,_.__arr)}static lerp(r,_,t){const a=__c(r);return _glMatrix._vec2.lerp(a.__arr,r.__arr,_.__arr,t),a}static min(r,_){const t=__c(r);return _glMatrix._vec2.min(t.__arr,r.__arr,_.__arr),t}static max(r,_){const t=__c(r);return _glMatrix._vec2.max(t.__arr,r.__arr,_.__arr),t}static rotate(r,_,t){const a=__c(r);return _glMatrix._vec2.rotate(a.__arr,r.__arr,_.__arr,t*DEG_TO_RAD),a}get squaredLength(){return _glMatrix._vec2.squaredLength(this.__arr)}get length(){return _glMatrix._vec2.length(this.__arr)}set length(r){this.normalize(),this.scale(r)}get x(){return this.__arr[0]}set x(r){return this.__arr[0]=r}get y(){return this.__arr[1]}set y(r){return this.__arr[1]=r}}class quat{constructor(){this.__arr=new Float32Array(4),arguments.keys().length>0?__set_arr(this,arguments,4,"quat"):this.__arr[3]=1}set(){__set_arr(this,arguments,4,"quat")}setIdentity(){this.__arr[0]=0,this.__arr[1]=0,this.__arr[2]=0,this.__arr[3]=1}equals(r){return _glMatrix._quat.equals(this.__arr,r.__arr)}equalsExact(r){return _glMatrix._quat.equalsExact(this.__arr,r.__arr)}setAxes(r,_,t){return _glMatrix._quat.setAxes(this.__arr,r.__arr,_.__arr,t.__arr),this}setAxisAngle(r,_){return _glMatrix._quat.setAxisAngle(this.__arr,r.__arr,_*DEG_TO_RAD),this}add(r){const _=new quat;return _glMatrix._quat.add(_.__arr,this.__arr,r.__arr),_}addEq(r){return _glMatrix._quat.add(this.__arr,this.__arr,r.__arr),this}mul(r){const _=new quat;return _glMatrix._quat.multiply(_.__arr,this.__arr,r.__arr),_}mulEq(r){return _glMatrix._quat.multiply(this.__arr,this.__arr,r.__arr),this}scaled(r){const _=__c(this);return _glMatrix._quat.scale(_.__arr,this.__arr,r),_}scale(r){return _glMatrix._quat.scale(this.__arr,this.__arr,r),this}rotatedX(r){const _=new quat;return _glMatrix._quat.rotateX(_.__arr,this.__arr,r*DEG_TO_RAD),_}rotateX(r){return _glMatrix._quat.rotateX(this.__arr,this.__arr,r*DEG_TO_RAD),this}rotatedY(r){const _=new quat;return _glMatrix._quat.rotateY(_.__arr,this.__arr,r*DEG_TO_RAD),_}rotateY(r){return _glMatrix._quat.rotateY(this.__arr,this.__arr,r*DEG_TO_RAD),this}rotatedZ(r){const _=new quat;return _glMatrix._quat.rotateZ(_.__arr,this.__arr,r*DEG_TO_RAD),_}rotateZ(r){return _glMatrix._quat.rotateZ(this.__arr,this.__arr,r*DEG_TO_RAD),this}calculateW(){return Math.sqrt(Math.abs(1-this.__arr[0]*this.__arr[0]-this.__arr[1]*this.__arr[1]-this.__arr[2]*this.__arr[2]))}dot(r){return _glMatrix._quat.dot(this.__arr,r.__arr)}exp(){const r=new quat;return _glMatrix._quat.exp(r.__arr,this.__arr),r}ln(){const r=new quat;return _glMatrix._quat.ln(r.__arr,this.__arr),r}pow(r){const _=new quat;return _glMatrix._quat.pow(_.__arr,this.__arr,r),_}inverse(){const r=new quat;return _glMatrix._quat.invert(r.__arr,this.__arr),r}invert(){return _glMatrix._quat.invert(this.__arr,this.__arr),this}normalized(){const r=new quat;return _glMatrix._quat.normalize(r.__arr,this.__arr),r}normalize(){return _glMatrix._quat.normalize(this.__arr,this.__arr),this}conjugate(){const r=new quat;return _glMatrix._quat.conjugate(r.__arr,this.__arr),r}toAxisAngle(){const r={axis:new vec3f,angle:0};return r.angle=_glMatrix._quat.getAxisAngle(r.axis.__arr,this.__arr)*RAD_TO_DEG,r}static lerp(r,_,t){const a=new quat;return _glMatrix._quat.lerp(a.__arr,r.__arr,_.__arr,t),a}static slerp(r,_,t){const a=new quat;return _glMatrix._quat.slerp(a.__arr,r.__arr,_.__arr,t),a}static sqlerp(r,_,t,a,s){const i=new quat;return _glMatrix._quat.slerp(i.__arr,r.__arr,_.__arr,t.__arr,a.__arr,s),i}static rotationTo(r,_){const t=new quat;return _glMatrix._quat.rotationTo(t.__arr,r.__arr,_.__arr),t}static fromeuler(r,_,t){const a=new quat;return _glMatrix._quat.fromEuler(a.__arr,r*DEG_TO_RAD,_*DEG_TO_RAD,t*DEG_TO_RAD),a}static fromMat3(r){const _=new quat;return _glMatrix._quat.fromMat3(_.__arr,r.__arr),_}static fromAxisAngle(r,_){const t=new quat;return _glMatrix._quat.setAxisAngle(t.__arr,r.__arr,_*DEG_TO_RAD),t}static angle(r,_){return _glMatrix._quat.angle(r.__arr,_.__arr)*RAD_TO_DEG}static random(){const r=new quat;return _glMatrix._quat.random(r.__arr),r}toString(){const{axis:r,angle:_}=this.toAxisAngle();return`axis: ${r.x.toFixed(2)}, ${r.y.toFixed(2)}, ${r.z.toFixed(2)} angle: ${_.toFixed(2)}`}get length(){return _glMatrix._quat.length(this.__arr)}get squaredLength(){return _glMatrix._quat.squaredLength(this.__arr)}}class mat4{constructor(r,_){this.__arr=r,this.__x=null,this.__y=null,this.__z=null,this.__w=null,__set_arr(this,_,16,"mat4*")}clone(){const r=__c(this);return r.__arr.set(this.__arr),r}set(){return __set_arr(this,arguments,16,"mat4*")}identity(){return _glMatrix._mat4.identity(this.__arr),this}add(r){const _=__c(this);return _glMatrix._mat4.add(_.__arr,this.__arr,r.__arr),_}addEq(r){return _glMatrix._mat4.add(this.__arr,this.__arr,r.__arr),this}sub(r){const _=__c(this);return _glMatrix._mat4.subtract(_.__arr,this.__arr,r.__arr),_}subEq(r){return _glMatrix._mat4.subtract(this.__arr,this.__arr,r.__arr),this}mul(r){const _=__c(this);return _glMatrix._mat4.multiply(_.__arr,this.__arr,r.__arr),_}mulEq(r){return _glMatrix._mat4.multiply(this.__arr,this.__arr,r.__arr),this}mulScalar(r){const _=__c(this);return _glMatrix._mat4.multiplyScalar(_.__arr,this.__arr,r),_}mulScalarEq(r){return _glMatrix._mat4.multiplyScalar(this.__arr,this.__arr,r),this}equals(r){return _glMatrix._mat4.equals(this.__arr,r.__arr)}equalsExact(r){return _glMatrix._mat4.equalsExact(this.__arr,r.__arr)}inverse(){const r=__c(this);return _glMatrix._mat4.invert(r.__arr,this.__arr),r}invert(){return _glMatrix._mat4.invert(this.__arr,this.__arr),this}rotated(r,_){const t=__c(this);return _glMatrix._mat4.rotate(t.__arr,this.__arr,_*DEG_TO_RAD,r.__arr),t}rotate(r,_){return _glMatrix._mat4.rotate(this.__arr,this.__arr,_*DEG_TO_RAD,r.__arr),this}rotatedX(r,_){const t=__c(this);return _glMatrix._mat4.rotateX(t.__arr,this.__arr,_*DEG_TO_RAD),t}rotateX(r,_){return _glMatrix._mat4.rotateX(this.__arr,this.__arr,_*DEG_TO_RAD),this}rotatedY(r,_){const t=__c(this);return _glMatrix._mat4.rotateY(t.__arr,this.__arr,_*DEG_TO_RAD),t}rotateY(r,_){return _glMatrix._mat4.rotateY(this.__arr,this.__arr,_*DEG_TO_RAD),this}rotatedZ(r,_){const t=__c(this);return _glMatrix._mat4.rotateZ(t.__arr,this.__arr,_*DEG_TO_RAD),t}rotateZ(r,_){return _glMatrix._mat4.rotateZ(this.__arr,this.__arr,_*DEG_TO_RAD),this}scaled(r){const _=__c(this);return _glMatrix._mat4.scale(_.__arr,this.__arr,r.__arr),_}scale(r){return _glMatrix._mat4.scale(this.__arr,this.__arr,r.__arr),this}translated(r){const _=__c(this);return _glMatrix._mat4.translate(_.__arr,this.__arr,r.__arr),_}translate(r){return _glMatrix._mat4.translate(this.__arr,this.__arr,r.__arr),this}transposed(){const r=__c(this);return _glMatrix._mat4.transpose(r.__arr,this.__arr),r}transpose(){return _glMatrix._mat4.transpose(this.__arr,this.__arr),this}adjoint(){const r=__c(this);return _glMatrix._mat4.adjoint(r.__arr,this.__arr),r}determinant(){return _glMatrix._mat4.determinant(this.__arr)}frob(){return _glMatrix._mat4.frob(this.__arr)}getRotation(){const r=new quat;return _glMatrix._mat4.getRotation(r.__arr,this.__arr),r}getScale(){const r=new vec3(__new_arr(this,3));return _glMatrix._mat4.getScaling(r.__arr,this.__arr),r}getTranslation(){const r=new vec3(__new_arr(this,3));return _glMatrix._mat4.getTranslation(r.__arr,this.__arr),r}getNormalMatrix(){const r=new mat3(__new_arr(this,9));return _glMatrix._mat3.normalFromMat4(r.__arr,this.__arr),r}toString(){return`${this.__arr[0]}, ${this.__arr[1]}, ${this.__arr[2]}, ${this.__arr[3]}\n`+`${this.__arr[4]}, ${this.__arr[5]}, ${this.__arr[6]}, ${this.__arr[7]}\n`+`${this.__arr[8]}, ${this.__arr[9]}, ${this.__arr[10]}, ${this.__arr[11]}\n`+`${this.__arr[12]}, ${this.__arr[13]}, ${this.__arr[14]}, ${this.__arr[15]}`}get x(){return this.__x||(this.__x=new vec4(this.__arr,{__view:[0,4]})),this.__x}set x(r){this.__arr[0]=r.__arr[0],this.__arr[1]=r.__arr[1],this.__arr[2]=r.__arr[2],this.__arr[3]=r.__arr[3]}get y(){return this.__y||(this.__y=new vec4(this.__arr,{__view:[4,4]})),this.__y}set y(r){this.__arr[4]=r.__arr[0],this.__arr[5]=r.__arr[1],this.__arr[6]=r.__arr[2],this.__arr[7]=r.__arr[3]}get z(){return this.__z||(this.__z=new vec4(this.__arr,{__view:[8,4]})),this.__z}set z(r){this.__arr[8]=r.__arr[0],this.__arr[9]=r.__arr[1],this.__arr[10]=r.__arr[2],this.__arr[11]=r.__arr[3]}get w(){return this.__w||(this.__w=new vec4(this.__arr,{__view:[12,4]})),this.__w}set w(r){this.__arr[12]=r.__arr[0],this.__arr[13]=r.__arr[1],this.__arr[14]=r.__arr[2],this.__arr[15]=r.__arr[3]}}class mat3{constructor(r,_){this.__arr=r,this.__x=null,this.__y=null,this.__z=null,__set_arr(this,_,9,"mat3*")}clone(){const r=__c(this);return r.__arr.set(this.__arr),r}set(){return __set_arr(this,arguments,9,"mat3*")}identity(){return _glMatrix._mat3.identity(this.__arr),this}add(r){const _=__c(this);return _glMatrix._mat3.add(_.__arr,this.__arr,r.__arr),_}addEq(r){return _glMatrix._mat3.add(this.__arr,this.__arr,r.__arr),this}sub(r){const _=__c(this);return _glMatrix._mat3.subtract(_.__arr,this.__arr,r.__arr),_}subEq(r){return _glMatrix._mat3.subtract(this.__arr,this.__arr,r.__arr),this}mul(r){const _=__c(this);return _glMatrix._mat3.multiply(_.__arr,this.__arr,r.__arr),_}mulEq(r){return _glMatrix._mat3.multiply(this.__arr,this.__arr,r.__arr),this}mulScalar(r){const _=__c(this);return _glMatrix._mat3.multiplyScalar(_.__arr,this.__arr,r),_}mulScalarEq(r){return _glMatrix._mat3.multiplyScalar(this.__arr,this.__arr,r),this}equals(r){return _glMatrix._mat3.equals(this.__arr,r.__arr)}equalsExact(r){return _glMatrix._mat3.equalsExact(this.__arr,r.__arr)}inverse(){const r=__c(this);return _glMatrix._mat3.invert(r.__arr,this.__arr),r}invert(){return _glMatrix._mat3.invert(this.__arr,this.__arr),this}rotated(r){const _=__c(this);return _glMatrix._mat3.rotate(_.__arr,this.__arr,r*DEG_TO_RAD),_}rotate(r){return _glMatrix._mat3.rotate(this.__arr,this.__arr,r*DEG_TO_RAD),this}scaled(r){const _=__c(this);return _glMatrix._mat3.scale(_.__arr,this.__arr,r.__arr),_}scale(r){return _glMatrix._mat3.scale(this.__arr,this.__arr,r.__arr),this}translated(r){const _=__c(this);return _glMatrix._mat3.translate(_.__arr,this.__arr,r.__arr),_}translate(r){return _glMatrix._mat3.translate(this.__arr,this.__arr,r.__arr),this}transposed(){const r=__c(this);return _glMatrix._mat3.transpose(r.__arr,this.__arr),r}transpose(){return _glMatrix._mat3.transpose(this.__arr,this.__arr),this}adjoint(){const r=__c(this);return _glMatrix._mat3.adjoint(r.__arr,this.__arr),r}determinant(){return _glMatrix._mat3.determinant(this.__arr)}frob(){return _glMatrix._mat3.frob(this.__arr)}toString(){return`${this.__arr[0]}, ${this.__arr[1]}, ${this.__arr[2]}\n`+`${this.__arr[3]}, ${this.__arr[4]}, ${this.__arr[5]}\n`+`${this.__arr[6]}, ${this.__arr[7]}, ${this.__arr[8]}`}get x(){return this.__x||(this.__x=new vec3(this.__arr,{__view:[0,3]})),this.__x}set x(r){this.__arr[0]=r.__arr[0],this.__arr[1]=r.__arr[1],this.__arr[2]=r.__arr[2]}get y(){return this.__y||(this.__y=new vec3(this.__arr,{__view:[3,3]})),this.__y}set y(r){this.__arr[3]=r.__arr[0],this.__arr[4]=r.__arr[1],this.__arr[5]=r.__arr[2]}get z(){return this.__z||(this.__z=new vec3(this.__arr,{__view:[6,3]})),this.__z}set z(r){this.__arr[6]=r.__arr[0],this.__arr[7]=r.__arr[1],this.__arr[8]=r.__arr[2]}}class mat2{constructor(r,_){this.__arr=r,this.__x=null,this.__y=null,__set_arr(this,_,4,"mat2*")}clone(){const r=__c(this);return r.__arr.set(this.__arr),r}set(){return __set_arr(this,arguments,4,"mat2*")}identity(){return _glMatrix._mat2.identity(this.__arr),this}add(r){const _=__c(this);return _glMatrix._mat2.add(_.__arr,this.__arr,r.__arr),_}addEq(r){return _glMatrix._mat2.add(this.__arr,this.__arr,r.__arr),this}sub(r){const _=__c(this);return _glMatrix._mat2.subtract(_.__arr,this.__arr,r.__arr),_}subEq(r){return _glMatrix._mat2.subtract(this.__arr,this.__arr,r.__arr),this}mul(r){const _=__c(this);return _glMatrix._mat2.multiply(_.__arr,this.__arr,r.__arr),_}mulEq(r){return _glMatrix._mat2.multiply(this.__arr,this.__arr,r.__arr),this}mulScalar(r){const _=__c(this);return _glMatrix._mat2.multiplyScalar(_.__arr,this.__arr,r),_}mulScalarEq(r){return _glMatrix._mat2.multiplyScalar(this.__arr,this.__arr,r),this}equals(r){return _glMatrix._mat2.equals(this.__arr,r.__arr)}equalsExact(r){return _glMatrix._mat2.equalsExact(this.__arr,r.__arr)}inverse(){const r=__c(this);return _glMatrix._mat2.invert(r.__arr,this.__arr),r}invert(){return _glMatrix._mat2.invert(this.__arr,this.__arr),this}rotated(r){const _=__c(this);return _glMatrix._mat2.rotate(_.__arr,this.__arr,r*DEG_TO_RAD),_}rotate(r){return _glMatrix._mat2.rotate(this._mat2,this.__arr,r*DEG_TO_RAD),this}scaled(r){const _=__c(this);return _glMatrix._mat2.scale(_.__arr,this.__arr,r.__arr),_}scale(r){return _glMatrix._mat2.scale(this.__arr,this.__arr,r.__arr),this}transposed(){const r=__c(this);return _glMatrix._mat2.transpose(r.__arr,this.__arr),r}transpose(){return _glMatrix._mat2.transpose(this.__arr,this.__arr),this}adjoint(){const r=__c(this);return _glMatrix._mat2.adjoint(r.__arr,this.__arr),r}determinant(){return _glMatrix._mat2.determinant(this.__arr)}frob(){return _glMatrix._mat2.frob(this.__arr)}toString(){return`${this.__arr[0]}, ${this.__arr[1]}\n${this.__arr[2]}, ${this.__arr[3]}`}get x(){return this.__x||(this.__x=new vec2(this.__arr,{__view:[0,2]})),this.__x}set x(r){this.__arr[0]=r.__arr[0],this.__arr[1]=r.__arr[1]}get y(){return this.__y||(this.__y=new vec2(this.__arr,{__view:[2,2]})),this.__y}set y(r){this.__arr[2]=r.__arr[0],this.__arr[3]=r.__arr[1]}}var vec4f=class extends vec4{constructor(){super(new Float32Array(4),arguments)}static random(r){const _=new vec4f;return _glMatrix._vec4.random(_.__arr,r),_}},vec4i=class extends vec4{constructor(){super(new Int32Array(4),arguments)}static random(r){const _=new vec4i;return _glMatrix._vec4.random(_.__arr,r),_}},vec3f=class extends vec3{constructor(){super(new Float32Array(3),arguments)}static random(r){const _=new vec3f;return _glMatrix._vec3.random(_.__arr,r),_}},vec3i=class extends vec3{constructor(){super(new Int32Array(3),arguments)}static random(r){const _=new vec3i;return _glMatrix._vec3.random(_.__arr,r),_}},vec2f=class extends vec2{constructor(){super(new Float32Array(2),arguments)}static random(r){const _=new vec2f;return _glMatrix._vec2.random(_.__arr,r),_}},vec2i=class extends vec2{constructor(){super(new Int32Array(2),arguments)}static random(r){const _=new vec2i;return _glMatrix._vec2.random(_.__arr,r),_}},vec4ui=class extends vec4{constructor(){super(new Uint32Array(4),arguments)}},vec3ui=class extends vec3{constructor(){super(new Uint32Array(3),arguments)}},vec2ui=class extends vec2{constructor(){super(new Uint32Array(2),arguments)}},mat4i=class extends mat4{constructor(){super(new Int32Array(16),arguments)}},mat4ui=class extends mat4{constructor(){super(new Uint32Array(16),arguments)}},mat4f=class extends mat4{constructor(){super(new Float32Array(16),arguments)}},mat3i=class extends mat3{constructor(){super(new Int32Array(9),arguments)}},mat3ui=class extends mat3{constructor(){super(new Uint32Array(9),arguments)}},mat3f=class extends mat3{constructor(){super(new Float32Array(9),arguments)}},mat2i=class extends mat2{constructor(){super(new Int32Array(4),arguments)}},mat2ui=class extends mat2{constructor(){super(new Uint32Array(4),arguments)}},mat2f=class extends mat2{constructor(){super(new Float32Array(4),arguments)}},Transform3D={rotationTranslation:(r,_)=>{const t=new mat4f;return _glMatrix._mat4.fromRotationTranslation(t.__arr,r.__arr,_.__arr),t},rotationTranslationScale:(r,_,t)=>{const a=new mat4f;return _glMatrix._mat4.fromRotationTranslationScale(a.__arr,r.__arr,_.__arr,t.__arr),a},rotationTranslationScaleOrigin:(r,_,t,a)=>{const s=new mat4f;return _glMatrix._mat4.fromRotationTranslationScaleOrigin(s.__arr,r.__arr,_.__arr,t.__arr,a.__arr),s},rotationX:r=>{const _=new mat4f;return _glMatrix._mat4.fromXRotation(_.__arr,r*DEG_TO_RAD),_},rotationY:r=>{const _=new mat4f;return _glMatrix._mat4.fromYRotation(_.__arr,r*DEG_TO_RAD),_},rotationZ:r=>{const _=new mat4f;return _glMatrix._mat4.fromZRotation(_.__arr,r*DEG_TO_RAD),_},rotation:(r,_)=>{const t=new mat4f;return r instanceof quat?_glMatrix._mat4.fromQuat(t.__arr,r.__arr):r instanceof vec3&&null!=_?_glMatrix._mat4.fromRotation(t.__arr,_*DEG_TO_RAD,r.__arr):engine.error("Invalid arguments passed to Transform.rotation. Must either be (instance of quat), or (instance of vec3*, angle)."),t},translation:r=>{const _=new mat4f;return _glMatrix._mat4.fromTranslation(_.__arr,r.__arr),_},scale:r=>{const _=new mat4f;return _glMatrix._mat4.fromScaling(_.__arr,r.__arr),_},targetTo:(r,_,t)=>{const a=new mat4f;_glMatrix._mat4.targetTo(a.__arr,r.__arr,_.__arr,t.__arr)}},Transform2D={rotation:r=>{const _=new mat3f;return r instanceof quat?_glMatrix._mat3.fromQuat(_.__arr,r.__arr):_glMatrix._mat3.fromRotation(_.__arr,angle*DEG_TO_RAD),_},translation:r=>{const _=new mat3f;return _glMatrix._mat3.fromTranslation(_.__arr,r.__arr),_},scale:r=>{const _=new mat3f;return _glMatrix._mat3.fromScaling(_.__arr,r.__arr),_}},View={lookAt:(r,_,t)=>{const a=new mat4f;return _glMatrix._mat4.lookAt(r.__arr,_.__arr,t.__arr),a}},Projection={frustum:(r,_,t,a,s,i)=>{const e=new mat4f;return _glMatrix._mat4.frustum(e.__arr,r,_,t,a,s,i),e},ortho:(r,_,t,a,s,i)=>{const e=new mat4f;return _glMatrix._mat4.ortho(e.__arr,r,_,t,a,s,i),e},perspective:(r,_,t,a)=>{const s=mat4f();return _glMatrix._mat4.perspective(s.__arr,r*DEG_TO_RAD,_,t,a),s},perspectiveFromFieldOfView:(r,_,t,a,s,i)=>{const e=mat4f(),n=1===DEG_TO_RAD?57.2957795131:DEG_TO_RAD,h={upDegrees:r*n,downDegrees:_*n,leftDegrees:t*n,rightDegrees:a*n};return _glMatrix._mat4.perspectiveFromFieldOfView(e.__arr,h,s,i),e}};
